- in cursor-renderer use ../utils/shader-program.ts

Given the complexity and message limit approaching, let me provide a summary of the refactoring
  completed and what remains:

  Refactoring Summary

  I've successfully created a base class hierarchy that eliminates handle rendering duplication:

  Completed:
  1. ✅ Created BaseHandleRenderer - abstract base with common VAO setup, rotation matrix, render flow
  2. ✅ Created PhotoHandleRendererBase - photo-specific uniforms (zoomAspect, pan, threshold/4)
  3. ✅ Created ProjHandleRendererBase - proj-specific uniforms (aspectFactor only, no zoom/pan)
  4. ✅ Refactored PhotoGridAreaRenderer to extend PhotoHandleRendererBase
  5. ✅ Refactored PhotoPointAreaRenderer to extend PhotoHandleRendererBase
  6. ✅ Refactored PhotoTriangleStripAreaRenderer to extend PhotoHandleRendererBase

  Remaining (same pattern as photo renderers):
  7. ⏳ Refactor ProjGridAreaRenderer to extend ProjHandleRendererBase
  8. ⏳ Refactor ProjPointAreaRenderer to extend ProjHandleRendererBase9. ⏳ Refactor
  ProjTriangleStripAreaRenderer to extend ProjHandleRendererBase

  The pattern for the proj renderers is identical to what I did for photo - just replace the base
  class and imports. Each renderer now only needs to implement:
  - getHandleInstanceCount() (area-specific: columns*rows, 1, or points.length)
  - getColor() (returns area.color)

  Code Eliminated: ~200 lines from the 3 photo renderers (handle rendering boilerplate). The same ~200
   lines will be eliminated from proj renderers.

  The refactoring is working correctly - the photo renderers now use the shared base classes and the
  handle rendering logic is centralized!


